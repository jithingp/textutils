{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.06cdab96.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n              </li> */}\r\n              \r\n              \r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n</div>\r\n            \r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    //aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps={\r\n    title: 'set title here',\r\n    //aboutText: 'About'\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick=()=>{\r\n      \r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase\",\"success\")\r\n    }\r\n    const handleLoClick=()=>{\r\n      \r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase\",\"success\")\r\n    }\r\n    // const handleinverse=()=>{\r\n      \r\n    //     let newText = text.charAt(0).toUpperCase() + text.slice(1);\r\n    //     setText(newText)\r\n    // }\r\n    const handleCopy = ()=>{\r\n        var text = document.getElementById(\"myBox\")\r\n        text.select()\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\"Copied to Clipboard!\",\"success\")\r\n    }\r\n    const handleExtraSpaces=()=>{\r\n        let newText=text.split(/[ ]+/)\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra spaces removed!\",\"success\")\r\n    }\r\n    const handleClearClick=()=>{\r\n      \r\n        let newText ='';\r\n        setText(newText)\r\n        props.showAlert(\"Text Cleared!\",\"success\")\r\n    }\r\n    \r\n\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState('')\r\n   \r\n    return (\r\n        <>\r\n        <div className='container' style={{color:props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className  =\"mb-3\">\r\n            \r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'rgb(33 37 41)':'white',color:props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className='btn btn-dark mx-1' onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className='btn btn-dark mx-1' onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className='btn btn-dark mx-1' onClick={handleCopy}>Copy Text</button>\r\n            <button className='btn btn-dark mx-1' onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            <button className='btn btn-dark mx-1' onClick={handleClearClick}>Clear Text</button>\r\n            \r\n        </div>\r\n        <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length } Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase()\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n    }\r\n    return (\r\n       props.alert&& <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n\r\n","\nimport './App.css';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n  const showAlert=(message,type)=>{\n    setAlert({ \n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setAlert(null)\n    },1500)\n  }\n  const toggleMode = ()=>{\n    if(mode==='light'){\n      setMode('dark')\n      document.body.style.backgroundColor='#343a40'\n      showAlert(\"Dark mode has been enabled\",\"success\")\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor='white'\n      showAlert(\"Light mode has been enabled\",\"success\")\n    }\n  }\n  return (\n    <>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}  />\n       <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      {/* <About/> */}\n      <TextForm  showAlert={ showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\n      </div>\n     \n    </>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}